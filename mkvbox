#!/bin/bash

#############################################################################
# Configure
#############################################################################
CFG_DESKTOP=mate	# mate/xfce/lxde/cinnamon/gnome/kde
CFG_IME=ibus            # ibus/fcitx
CFG_VMCN=kvmguest       # vbguest/kvmguest
CFG_LOG=install.log	# define the log file
CFG_HOSTNAME=mylinux		# setup the hostname (archlinux)
CFG_DOMAIN=localdomain		# setup the domain name (archlinux)

SSHOST=andy@10.0.2.2
SSPASS=

#############################################################################
# install command line tools
#############################################################################
CFG_CLI="repo cli vim"
#### basic development tools
#CFG_CLI="$CFG_CLI devel"
#### firmware and general development tools
#CFG_CLI="$CFG_CLI devmore"
### ffmpeg & libgd
#CFG_CLI="$CFG_CLI libffmpeg"
####install SDL and freeimage
#CFG_CLI="$CFG_CLI freeimage"
#### python basic and science kit
#CFG_CLI="$CFG_CLI pymore"
#### ftp server and configure
#CFG_CLI="$CFG_CLI vsftpd"
#### setting the bash
CFG_CLI="$CFG_CLI bash"
CFG_CLI="$CFG_CLI archlinux"

#############################################################################
# install X11 GUI tools
#############################################################################
CFG_GUI="xutil"
CFG_GROUP_XUTIL="geary"

#### browers
#CFG_GUI="$CFG_GUI firefox"
#CFG_GUI="$CFG_GUI firefox_qtm"
#CFG_GUI="$CFG_GUI chromium"
#CFG_GUI="$CFG_GUI chrome"
#### Downloader, for example, filezilla, bittorrents
#CFG_GUI="$CFG_GUI downloader"
#### Virtual Machine Hosts
#CFG_GUI="$CFG_GUI virtualbox"
#CFG_GUI="$CFG_GUI kvmhost"
#### Remote Desktop Client
#CFG_GUI="$CFG_GUI remotetty"
#### IM: pidgin
#CFG_GUI="$CFG_GUI pidgin"
#### image and picture tools
#CFG_GUI="$CFG_GUI picture"
CFG_GROUP_PIC="geeqie gthumb imagemagick gimp inkscape"
#### CAD suites
#CFG_GUI="$CFG_GUI cad"
CFG_GROUP_CAD="librecad freecad openscad blender"
####audio player
#CFG_GUI="$CFG_GUI pulsa"
#### video player
#CFG_GUI="$CFG_GUI vlc"
#### GStreamer codec collection
#CFG_GUI="$CFG_GUI gstreamer"
#### office suite
#CFG_GUI="$CFG_GUI office"	
#### IME for chinese and japanese
#CFG_GUI="$CFG_GUI ibus"
#CFG_GUI="$CFG_GUI fcitx"
#### chinese fonts and japanese basic fonts. Option: basic full
#CFG_GUI="$CFG_GUI eafont"
CFG_GROUP_EA_FONT="basic"
#CFG_GROUP_EA_FONT="full"


#############################################################################
# Installer with debugger
#############################################################################
CHROOT=
#CHROOT=./tmp

LogAs()
{
  echo -e "$@" | tee -a $CFG_LOG
}

LogExec()
{
  echo $@ | tee -a $CFG_LOG
  if test "x$CHROOT" = "x"; then
    eval $@ 2>&1 | tee -a $CFG_LOG
  fi
}

System()
{
  if test -e /etc/centos-release; then
    echo "CENTOS"
  elif test -e /etc/debian_version; then
    grep Ubuntu /etc/os-release > /dev/null
    if test "x$?" = "x0"; then
      echo "UBUNTU"
    else
      echo "DEBIAN"
    fi
  elif test -e /etc/arch-release; then
    echo "ARCHLINUX"
  else
    echo "UNKNOWN"
  fi
}

Users()
{
  grep '/home/' /etc/passwd | grep bash | cut -f1 -d':'
}

# Installer -g "Package Name", which is group install in CentOs
Installer()
{
  local Group="normal"

  if test "x$1" = "x-g"; then
    Group="group"
    shift    
  fi
  if test "x$1" = "x"; then
    return
  fi
  LogAs "\\nINSTALLING $@"
  case $CFG_SYS in
    CENTOS)
      if test "x$Group" = "xgroup"; then
        LogExec yum -y groupinstall \"$@\"
      else
        LogExec yum -y install "$@"
      fi
      ;;
    DEBIAN|UBUNTU)
      if test "x$CHROOT" = x; then
        apt-get -y install "$@" 2>&1 | tee -a $CFG_LOG
      else
        apt-get -s -y install "$@" 2>&1 | tee -a $CFG_LOG
      fi
      ;;
    ARCHLINUX)
      LogExec pacman -S --noconfirm --needed "$@"
      ;;
  esac
  if ! test "x$?" = "x0"; then
    LogAs "Install failed!"
    exit 1
  fi
}

# Used in ArchLinux
# add_users $ADDUSER $ADDPWD
add_users()
{
  echo useradd -m -G audio,lp,optical,storage,video,wheel,vboxsf -s /bin/bash "$1" | tee -a $CFG_LOG
  if test "x$CHROOT" = "x"; then
    useradd -m -G audio,lp,optical,storage,video,wheel,vboxsf -s /bin/bash "$1" | tee -a $CFG_LOG
    echo "$1":"$2" | chpasswd
    sudo -u "$1" mkdir "/home/$1/bin"
  else          # debug mode
    echo "$1":"$2"  | tee -a $CFG_LOG
    echo sudo -u "$1" mkdir "/home/$1/bin" | tee -a $CFG_LOG
  fi

  LogAs "Autologin the first console as the default user [$ADDUSER]."
  mkdir -p "$CHROOT/etc/systemd/system/getty@tty1.service.d"
  cat > "$CHROOT/etc/systemd/system/getty@tty1.service.d/autologin.conf" << AUTOLOGIN
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $ADDUSER --noclear %I \$TERM
AUTOLOGIN

  #auto start X desktop as the default user so no xDM needed
  LogAs "Auto-start the X desktop"
  cat > $CHROOT/etc/skel/.bash_profile << AUTODESK
if [ -z "\$DISPLAY" ] && [ -n "\$XDG_VTNR" ] && [ "\$XDG_VTNR" -eq 1 ]; then
  exec startx
fi
AUTODESK

}


#############################################################################
# Install packages
#############################################################################
Install_Batch_dummy()
{
  echo This is a dummy installation for testing only!
}

Repo_Update_CentOS()
{
  LogAs "\\nINSTALLING extra and unofficial Repos"

  #install extra repos
  Installer epel-release

  #install Nux Dextop
  if test ! -e /etc/yum.repos.d/nux-dextop.repo; then
    LogExec rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm

    # appending nux-misc repo, for tunctl.
    # this repo is default disabled, using it by 
    #   yum --enablerepo=nux-misc install tunctl
    cat >> $CHROOT/etc/yum.repos.d/nux-dextop.repo << NUXMISC

[nux-misc]
name=Nux Misc
baseurl=http://li.nux.ro/download/nux/misc/el7/x86_64/
enabled=0
gpgcheck=1
gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro

NUXMISC
  fi

  #install RPM Fusion
  if test ! -e /etc/yum.repos.d/rpmfusion-free-updates.repo; then
    LogExec rpm -Uvh https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm
  fi
  if test ! -e /etc/yum.repos.d/rpmfusion-nonfree-updates.repo; then
    LogExec rpm -Uvh https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-7.noarch.rpm
  fi

  #install ELRepo
  if test "x$1" = "xall"; then
    if test ! -e /etc/yum.repos.d/elrepo.repo; then
      LogAs "Warning: ELRepo should not be installed ahead of X desktop"
      LogExec rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
      LogExec rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
    fi
  fi

  #update and upgrade to the newest releases
  LogExec yum -y update
}

Repo_Update_Debian()
{
  local keyring="deb-multimedia-keyring_2016.8.1_all.deb"

  grep "main contrib non-free" /etc/apt/sources.list > /dev/null
  if test "x$?" != "x0"; then
    LogAs "\\nINSTALLING contrib, non-free and unofficial Repos"
    LogExec mv -f /etc/apt/sources.list /tmp/sources.list
    if test "x$CHROOT" = x; then
      sed 's/main/main contrib non-free/' /tmp/sources.list > /etc/apt/sources.list
    else
      LogAs "sed 's/main/main contrib non-free/' /tmp/sources.list"
    fi
    LogExec rm -f /tmp/sources.list
  fi

  grep "deb-multimedia.org" /etc/apt/sources.list > /dev/null
  if test "x$?" != "x0"; then
    echo -e "\\n# Deb Multimedia for mostly multimedia packages" >> $CHROOT/etc/apt/sources.list
    #echo "deb http://www.deb-multimedia.org stretch main non-free" >> $CHROOT/etc/apt/sources.list
    echo "deb http://mirror.optus.net/deb-multimedia/ stable main non-free" >> $CHROOT/etc/apt/sources.list
    LogExec apt-get update
    LogExec apt-get -y --allow-unauthenticated install deb-multimedia-keyring
    if ! test "x$?" = "x0"; then
      # the backup plan for deb-multimedia keyring
      if test -e "./bin/$keyring"; then
        LogExec dpkg -i ./bin/$keyring
      else
        LogExec wget http://www.deb-multimedia.org/pool/main/d/deb-multimedia-keyring/$keyring
        if test -e "$keyring"; then
          LogExec dpkg -i $keyring
        fi
      fi
    fi
  fi

  #update and upgrade to the newest releases
  LogExec apt-get update 
  if ! test "x$?" = "x0"; then
    exit $?
  fi
  LogExec apt-get -y upgrade
  if ! test "x$?" = "x0"; then
    exit $?
  fi
}

Repo_Update_Ubuntu()
{
  #update and upgrade to the newest releases
  LogExec apt-get update 
  if ! test "x$?" = "x0"; then
    exit $?
  fi
  LogExec apt-get -y upgrade
  if ! test "x$?" = "x0"; then
    exit $?
  fi
}

Repo_Update_Archlinux()
{
  Installer -yu
  Installer -c
}

Install_Batch_repo()
{ 
  LogAs "\\nINSTALLING Repo of current distribution"
  case $CFG_SYS in
    CENTOS) Repo_Update_CentOS $@ ;;
    DEBIAN) Repo_Update_Debian $@ ;;
    UBUNTU) Repo_Update_Ubuntu $@ ;; 
    ARCHLINUX) Repo_Update_Archlinux $@ ;;

    *) LogAs "UNKNOWN OS SYSTEM!"
       exit 2;;
  esac
}

Install_Batch_cli()
{
  local VOLUMN="net-tools wget pciutils usbutils cifs-utils arj git p7zip zip unzip cpio bc expect"

  LogAs "\\nINSTALLING generic CLI tools"

  #### ifconfig/lspci/samba/... always needed
  case $CFG_SYS in
    CENTOS) VOLUMN="$VOLUMN hexedit attr unrar" ;;
    DEBIAN) VOLUMN="$VOLUMN aptitude rar" ;;
    UBUNTU) VOLUMN="$VOLUMN openssh-client rar" ;;
    ARCHLINUX) VOLUMN="$VOLUMN openssh unrar" ;;
  esac
  Installer $VOLUMN
}

# OPTIONS:
#   filename:  output the .vimrc to (can be /dev/stdout)
Install_Batch_vim()
{
  local FOUT=$CHROOT/etc/skel/.vimrc

  if test "x$1" != "x"; then
    FOUT=$1
  else
    LogAs "\\nINSTALLING VIm"
    Installer vim

    ### Link vi to vim as default
    if test -e /usr/bin/vi; then
      LogExec rm -f /usr/bin/vi
    fi
    case $CFG_SYS in
      CENTOS|ARCHLINUX)
        if test -e /usr/bin/vim; then
          LogExec ln -s /usr/bin/vim /usr/bin/vi
        fi
        ;;
      DEBIAN|UBUNTU)
        if test -e /etc/alternatives/vim; then
          LogExec ln -s /etc/alternatives/vim /usr/bin/vi						   
        fi
        ;;
    esac
  fi

  ### create a default vim profile
  cat > $FOUT << VIMRC
runtime! vimrc_example.vim
filetype indent on
set autoindent
set nobackup
set noundofile
set mouse=
set so=1
VIMRC
}

Install_Batch_devel()
{
  LogAs "\\nINSTALLING Basic Development packages (C/C++)"
  case $CFG_SYS in
    CENTOS) Installer -g "Development Tools" ;;
    DEBIAN|UBUNTU) Installer build-essential manpages-dev pkg-config;;
    ARCHLINUX) Installer base-devel ;;
  esac
}

Install_Batch_libffmpeg()
{
  LogAs "\\nINSTALLING ffmpeg and gd development packages"
  case $CFG_SYS in
    CENTOS) Installer ffms2-devel gd-devel ;;
    DEBIAN|UBUNTU) Installer libavformat-dev libswscale-dev libgd2-dev libx11-dev zlib1g-dev ;;
    ARCHLINUX) Installer ffmpeg gd ;;
  esac
}

Install_Batch_freeimage()
{
  LogAs "\\nINSTALLING freeimage and SDL development packages"
  case $CFG_SYS in
    CENTOS) Installer freeimage-devel SDL-devel SDL_gfx-devel ;;
    DEBIAN|UBUNTU) Installer libfreeimage-dev libsdl-dev libsdl-gfx1.2-dev ;;
    ARCHLINUX) Installer sdl2 freeimage lsb_release ;;
  esac
}

Install_Batch_devmore()
{
  LogAs "\\nINSTALLING more development packages"
  Installer srecord autoconf libtool gdb
}

Install_Batch_pymore()
{
  local VOLUMN=""

  LogAs "\\nINSTALLING Python related packages"
  case $CFG_SYS in
    CENTOS) VOLUMN="$VOLUMN python2-pip python-devel python-virtualenv"
      VOLUMN="$VOLUMN python34-pip python34-devel python34-virtualenv"
      VOLUMN="$VOLUMN scipy python34-scipy"
      ;;
    DEBIAN|UBUNTU) VOLUMN="$VOLUMN python-pip python-virtualenv python-sklearn-lib"
      VOLUMN="$VOLUMN python-skimage-lib"
      VOLUMN="$VOLUMN python3-pip python3-virtualenv python3-sklearn-lib"
      ;;
    ARCHLINUX) VOLUMN="$VOLUMN python-pip python2-pip python-virtualenv python2-virtualenv"
      VOLUMN="$VOLUMN python-scipy python2-scipy python-scikit-learn python2-scikit-learn"
      VOLUMN="$VOLUMN python-matplotlib python2-matplotlib"
      ;;
  esac
  if test "x$VOLUMN" != "x"; then
    Installer $VOLUMN
  fi
}


#anonymous_enable=NO             # Disallow anonymous logins
#local_enable=YES                # Enable local users to login
#write_enable=YES                # local user to be able to write to a directory
#chroot_local_user=YES           # Local users will be ‘chroot jailed’ and they 
#                                # will be denied access to any other part of the server.
Install_Batch_vsftpd()
{
  LogAs "\\nINSTALLING and cpnfiguring Vsftpd"

  Installer vsftpd

  LogExec mv -f /etc/vsftpd/vsftpd.conf /tmp/vsftpd.conf
  if test "x$CHROOT" != x; then
    LogAs "Configure the /etc/vsftpd/vsftpd.conf file"
  else
    sed -e 's/^[#]*anonymous_enable=.*/anonymous_enable=NO/1' \
	    -e 's/^[#]*local_enable=.*/local_enable=YES/1' \
	    -e 's/^[#]*write_enable=.*/write_enable=YES/1' \
	    -e 's/^[#]*chroot_local_user=.*/chroot_local_user=YES/1' \
	    /tmp/vsftpd.conf > /etc/vsftpd/vsftpd.conf
    echo -e "\\npasv_enable=Yes\\npasv_max_port=10100\\npasv_min_port=10090\\n" \
	    >> /etc/vsftpd/vsftpd.conf
  fi
  LogExec rm -f /tmp/vsftpd.conf

  # First restart the service
  LogExec systemctl restart vsftpd
  # Then set the vsftpd service to start at boot
  LogExec systemctl enable vsftpd

  # Allow the default FTP port, port 21, through firewalld
  LogExec firewall-cmd --permanent --add-port=21/tcp
  # make sure it's public/  interfaces: eth0
  LogExec firewall-cmd --get-active-zones
  LogExec firewall-cmd --permanent --zone=public --add-port=10090-10100/tcp
  # reload the firewall
  LogExec firewall-cmd --reload

  # Update the SELinux policy
  LogExec setsebool -P ftpd_full_access 1
  LogExec setsebool -P allow_ftpd_anon_write 1
  LogExec setsebool -P ftpd_use_passive_mode 1
  #getsebool -a | grep ftp
}

Install_Batch_samba()
{
  local DEFUSER=$(Users)

  LogAs "\\nINSTALLING the SAMBA service."
  Installer samba samba-client smbnetfs

  grep mkvbox /etc/samba/smb.conf > /dev/null
  if test "x$?" != "x0"; then
    LogExec cp /etc/samba/smb.conf /etc/samba/smb.conf_backup
    cat > $CHROOT/etc/samba/smb.conf << SMBCFG
# generated by mkvbox
[global]
	workgroup = WORKGROUP
	log file = /var/log/samba/%m.log
	passdb backend = tdbsam
	server min protocol = SMB2

# Anonymous Samba sharing
	security = user
	map to guest = bad user

# Enable usershares
	# security = share
	usershare path = /var/lib/samba/usershares
	usershare max shares = 100
	usershare allow guests = yes
	usershare owner only = yes

# Disable printer share
	load printers = no
	printing = bsd
	printcap name = /dev/null
	disable spoolss = yes
	show add printer wizard = no

# Disable NetBIOS/WINS support
	disable netbios = yes
	dns proxy = no

[homes]
	comment = Home Directories
	valid users = %S, %D%w%S
	browseable = Yes
	read only = No
	inherit acls = Yes

[public]
	comment = Public Anonymous Access
	path = /var/samba/
	browsable =yes
	writable = yes
	guest ok = yes
        create mask = 0660
	directory mask = 0775

SMBCFG
  fi

  grep sambashare /etc/group > /dev/null
  if test "x$?" != "x0"; then
    LogExec groupadd -r sambashare
    if test "x$DEFUSER" != "x"; then
      LogExec usermod -a -G sambashare $DEFUSER
    fi
  fi

  if test ! -d /var/samba; then
    LogExec mkdir -p  /var/samba
    LogExec chmod 1777 /var/samba
  fi
  if test ! -d /var/lib/samba/usershares; then
    LogExec mkdir -p /var/lib/samba/usershares
    LogExec chown root:sambashare /var/lib/samba/usershares
    LogExec chmod 1770 /var/lib/samba/usershares
  fi

  for i in $DEFUSER; do
    pdbedit -u $DEFUSER > /dev/null
    if test "x$?" != "x0"; then
      LogAs "Adding the Samba User: $i"
      LogExec smbpasswd -a "$i"
    fi
  done

  # start the service
  case $CFG_SYS in
    CENTOS|ARCHLINUX)
      LogExec chcon -t samba_share_t /var/samba
      LogExec systemctl enable smb.service
      LogExec systemctl enable nmb.service
      LogExec systemctl restart smb.service
      LogExec systemctl restart nmb.service

      # SELinux settings
      LogExec setsebool -P samba_domain_controller on
      LogExec setsebool -P samba_enable_home_dirs on
      ;;
    DEBIAN|UBUNTU)
      LogExec systemctl enable smbd
      LogExec systemctl restart smbd
      ;;
  esac

  # create firewall rule
  systemctl status firewalld > /dev/null
  if test "x$?" = "x0"; then
    LogExec firewall-cmd --permanent --zone=public --add-service=samba
    LogExec firewall-cmd --reload
  fi
}

# OPTIONS:
#   filename:  output the .bashrc to (can be /dev/stdout)
Install_Batch_bash()
{
  local FOUT=$CHROOT/etc/skel/.bashrc

  if test "x$1" != "x"; then
    FOUT=$1
  fi
 
  LogAs "\\nINSTALLING the $FOUT file."

  grep bc_cmdline $FOUT > /dev/null
  if test "x$?" = "x0"; then
    return
  fi

  cat >> $FOUT << BASHRC
  
# If not running interactively, don't do anything
[[ \$- != *i* ]] && return
ulimit -c unlimited

PS1='\u:\w\\$ '
PATH="\$PATH:\$HOME/bin:." 

# replace expr with the bc command line express
bc_cmdline()
{
  if test "x\$@" = "x"; then
    echo A quick call to GNU bc, i.e., bcc EXPRESSIONS
  else
    echo \$@ | tr -d ',' | bc -l
  fi
}

alias bcc='bc_cmdline'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias l.='ls -d .* --color=auto'
alias ls='ls --color=auto'
alias ll='ls -lh --color=auto'
alias cp='cp -i'
alias mv='mv -i'
alias path='echo \$PATH'
BASHRC

  case $CFG_SYS in
    CENTOS)
      echo "alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'" >> $FOUT
      ;;
    DEBIAN|UBUNTU)
      ;;
    ARCHLINUX)
      ;;
  esac
  echo "" >> $FOUT
}

Install_Batch_archlinux()
{
  if test "x$CFG_SYS" != "xARCHLINUX"; then
    return
  fi

  if test ! -L /etc/localtime; then
    LogAs "\\nINSTALLING local time to Sydney, Australia"
    LogExec ln -sf /usr/share/zoneinfo/Australia/Sydney /etc/localtime
    LogExec hwclock --systohc
    LogAs "\\nINSTALLING Network Time Control"
    LogExec timedatectl set-ntp true
  fi
  if test ! -e /etc/locale.conf; then
    LogAs "\\nINSTALLING locale: Chinese included"
    cat >> /etc/locale.gen << LOCALE

en_US.UTF8 UTF-8
zh_CN.UTF8 UTF-8
zh_CN.GBK GBK
zh_CN.GB2312 GB2312
zh_CN.GB18030 GB18030

LOCALE
    LogExec locale-gen
    LogExec echo "LANG=en_US.UTF-8" >> /etc/locale.conf
  fi
  if test ! -e /etc/hostname; then
    LogAs "\\nINSTALLING hostname: $CFG_HOSTNAME.$CFG_DOMAIN"
    echo "$CFG_HOSTNAME" > /etc/hostname
    echo "127.0.0.1   $CFG_HOSTNAME.$CFG_DOMAIN $CFG_HOSTNAME" >> /etc/hosts
  fi
  if test ! -e /etc/sudoer; then
    LogAs "\\nINSTALLING sudo"
    Installer sudo
    echo "%wheel    ALL=(ALL) ALL" >> /etc/sudoer
  fi

  LogAs "\\nINSTALLING the coredump in sysctl"
  LogExec sysctl -w kernel.core_pattern="core"
}


# OPTIONS:
#  -s:    single user only
Install_Batch_skel()
{
  local PROFILE="/etc/skel/.bashrc /etc/skel/.vimrc"

  # installing the script to current user first
  LogExec cp -f $PROFILE ~

  if test $(id -u) != 0 || test "x$1" = "x-s"; then
    # if user is not root, or specified the single user only flag
    LogAs "\\nINSTALLING profiles from /etc/skel"
    return
  fi

  # only root can install the profiles to all users
  LogAs "\\nINSTALLING profiles from /etc/skel to all users"
  for i in $(Users); do
    LogExec sudo -u $i cp -f $PROFILE /home/$i
  done
}

Install_Batch_group()
{
  local DEFUSER=$(Users)

  if test "x$DEFUSER" = "x"; then
    return
  fi

  # Add user to group to access: the usb serial port
  LogAs "\\nINSTALLING default user groups"
  case $CFG_SYS in
    CENTOS) LogExec usermod -a -G audio,video,wheel,cdrom,dialout $DEFUSER ;;
    DEBIAN) LogExec usermod -a -G audio,video,wheel,cdrom,dialout,sudo,games $DEFUSER ;;
    UBUNTU) LogExec usermod -a -G audio,video,dialout $DEFUSER ;;
    ARCHLINUX) LogExec usermod -a -G audio,video,wheel,optical,storage,uucp $DEFUSER ;;
  esac
}

Install_Batch_eth0()
{
  # Note that in the document
  # https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames
  # whilst those three options only the last one, kernel command line, works (debian 9)
  LogAs "\\nINSTALLING traditional network interface eth0"

  ip link | grep eth0 > /dev/null
  if test "x$?" = "x0"; then
    LogAs "Traditional 'eth0' interface is found."
    return
  fi

  grep "GRUB_CMDLINE_LINUX=\"net.ifnames=0" /etc/default/grub
  if test "x$?" != "x0"; then
    LogExec mv -f /etc/default/grub /tmp/grub
    if test "x$CHROOT" != "x"; then
      LogAs "Disabling the Predictable Network Interface Names"
    else
      sed -e 's/^[#]*GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"net.ifnames=0 /1' \
               /tmp/grub > /etc/default/grub
      LogExec grub-mkconfig -o /boot/grub/grub.cfg
      
    fi
    LogExec rm -f /tmp/grub
  fi

  case $CFG_SYS in
    CENTOS)
      if test -e /etc/sysconfig/network-scripts/ifcfg-eth0; then
        LogAs "Interface 'eth0' is already configured."
      elif test "x$CHROOT" != "x"; then
        LogAs "Restore eth0 interface in $CFG_SYS"
      else
        sed -e 's/NAME=.*/NAME="eth0"/1' \
		-e 's/DEVICE=.*/DEVICE="eth0"/1' \
		/etc/sysconfig/network-scripts/ifcfg-en* > /etc/sysconfig/network-scripts/ifcfg-eth0
      fi
      ;;
    DEBIAN)
      LogExec mv -f /etc/network/interfaces /tmp/interfaces
      if test "x$CHROOT" != "x"; then
	LogAs "Restore eth0 interface in $CFG_SYS"
      else
        sed -e 's/allow-hotplug.*/allow-hotplug eth0/1' \
	       -e 's/iface en.*/iface eth0 inet dhcp/1' \
	       /tmp/interfaces > /etc/network/interfaces
      fi
      LogExec rm -f /tmp/interfaces
      ;;
    UBUNTU) 
      for i in $(grep -l ethernets /etc/netplan/*); do
        LogExec mv -f $i /tmp/interface
	if test "x$CHROOT" != "x"; then
	  LogAs "Restore eth0 interface in $CFG_SYS"
	else
	  sed 's/ en.*/ eth0/1' /tmp/interface > $i
	fi
	LogExec rm -f /tmp/interface
      done
      ;;

    ARCHLINUX)
      LogExec mv -f /etc/netctl/ethernet-dhcp /tmp/interfaces
      if test "x$CHROOT" != "x"; then
	LogAs "Restore eth0 interface in $CFG_SYS"
      else
        sed 's/Interface=.*/Interface=eth0/1' /tmp/interfaces > /etc/netctl/ethernet-dhcp
	netctl reenable ethernet-dhcp
      fi
      LogExec rm -f /tmp/interfaces
      ;;
  esac
}


#############################################################################
# Install X applications
#############################################################################
Install_LightDM_Arch()
{
    # install and config the lightdm in Archlinux
    Installer lightdm lightdm-gtk-greeter
    LogExec mv -f /etc/lightdm/lightdm.conf /tmp/lightdm.conf
    if test "x$CHROOT" = x; then
      sed 's/#greeter-session=example-gtk-gnome/greeter-session=lightdm-gtk-greeter/' \
                /tmp/lightdm.conf > /etc/lightdm/lightdm.conf
    else
      LogAs "sed 's/#greeter-session=example-gtk-gnome/greeter-session=lightdm-gtk-greeter/' ..."
    fi
    LogExec rm -f /tmp/lightdm.conf
    LogExec systemctl enable lightdm.service
}

Install_Desktop_Mate()
{
  case $CFG_SYS in
    CENTOS)
      #Installer --enablerepo=epel-testing  atril atril-caja
      LogExec yum -y --enablerepo=epel-testing install atril atril-caja

      Installer -g "MATE Desktop"
      Installer caja-share
      ;;
    DEBIAN)
      Installer mate-desktop-environment-extras lightdm
      ;;
    UBUNTU)
      Installer lightdm ubuntu-mate-desktop
      ;;
    ARCHLINUX)
      Installer mate mate-extra 
      Install_LightDM_Arch
      echo "exec mate-session" > $CHROOT/etc/skel/.xinitrc
  esac
}

Install_Desktop_Xfce()
{
  case $CFG_SYS in
    CENTOS)
      Installer -g "Xfce"
      Installer mousepad
      ;;
    DEBIAN|UBUNTU)
      Installer xfce4 xfce4-goodies thunar-archive-plugin lightdm
      ;;
    ARCHLINUX)
      Installer xfce4 xfce4-goodies
      Install_LightDM_Arch
      echo "exec startxfce4" > $CHROOT/etc/skel/.xinitrc
      ;;
  esac
}

Install_Desktop_Cinnamon()
{
  case $CFG_SYS in
    CENTOS)
      Installer cinnamon lightdm
      ;;
    DEBIAN)
      Installer cinnamon lightdm
      ;;
    UBUNTU)
      LogExec apt-add-repository -y ppa:embrosyn/cinnamon
      LogExec apt-get update
      LogExec apt-get -y upgrade
      Installer cinnamon lightdm
      ;;
    ARCHLINUX)
      Installer cinnamon
      Install_LightDM_Arch
      echo "exec cinnamon-session" > $CHROOT/etc/skel/.xinitrc
      ;;
  esac
}

Install_Desktop_Gnome()
{
  case $CFG_SYS in
    CENTOS)
      Installer -g "Server with GUI"
      ;;
    DEBIAN)
      Installer gnome
      ;;
    UBUNTU)
      Installer gnome-session-flashback
      ;;
    ARCHLINUX)
      Installer gnome gnome-extra gdm
      #echo "exec gnome-session" > $CHROOT/etc/skel/.xinitrc
      cat > $CHROOT/etc/skel/.xinitrc << GNOMECLS
export XDG_CURRENT_DESKTOP=GNOME-Classic:GNOME
export GNOME_SHELL_SESSION_MODE=classic
exec gnome-session --session=gnome-classic
GNOMECLS
      ;;
  esac
}

Install_Desktop_Lxde()
{
  case $CFG_SYS in
    CENTOS)
      LogAs "\\nINSTALLING Xfce instead of LXDE in CentOS 7"
      Installer -g "Xfce"
      ;;
    DEBIAN|UBUNTU)
      Installer lxde leafpad xarchiver
      ;;
    ARCHLINUX)
      Installer lxde leafpad xarchiver
      Install_LightDM_Arch
      echo "exec startlxde" > $CHROOT/etc/skel/.xinitrc
      ;;
  esac
}

Install_Desktop_KDE()
{
  case $CFG_SYS in
    CENTOS)
      Installer -g "KDE"
      ;;
    DEBIAN)
      Installer kde-plasma-desktop 
      ;;
    UBUNTU)
      Installer kubuntu-desktop
      ;;
    ARCHLINUX)
      Installer plasma-desktop kde-applications 
      Install_LightDM_Arch
      echo "exec startkde" > $CHROOT/etc/skel/.xinitrc
      ;;
  esac
}

Install_Desktop_Enlightenment()
{
  case $CFG_SYS in
    CENTOS)
      echo "https://copr.fedorainfracloud.org/coprs/dchen/enlightement-19-no-wayland/"
      ;;
    DEBIAN)
      echo "https://www.enlightenment.org/docs/distros/debian-start.md"
      ;;
    UBUNTU)
      LogExec add-apt-repository -y ppa:niko2040/e19
      LogExec apt-get update
      LogExec apt-get -y upgrade
      Installer enlightenment
      ;;
    ARCHLINUX)
      Installer enlightenment terminology
      echo "exec enlightenment_start" > $CHROOT/etc/skel/.xinitrc
      ;;
  esac
}

Install_Batch_xorg()
{
  LogAs "\\nINSTALLING X.org server"

  case $CFG_SYS in
    CENTOS) 
      Installer -g "X Window system" 
      # set runlevel to gui
      #systemctl isolate graphical.target
      LogExec systemctl set-default graphical.target
      ;;
    DEBIAN|UBUNTU) Installer xinit ;;
    ARCHLINUX) Installer xorg-server xorg-xinit mesa ttf-dejavu ttf-bitstream-vera ;;
  esac

  for i in $@; do
    case $i in
      xfce) Install_Desktop_Xfce ;;
      lxde) Install_Desktop_Lxde ;;
      cinnamon) Install_Desktop_Cinnamon ;;
      gnome) Install_Desktop_Gnome ;;
      kde) Install_Desktop_KDE ;;
      mate) Install_Desktop_Mate ;;
    esac
  done
}

Install_Batch_xutil()
{
  LogAs "\\nINSTALLING generic X Window tools"

  # installing these tool according to their CLI countpart
  if test -e /usr/bin/git; then
    Installer qgit 
  fi

  if test -e /usr/bin/cc; then
    Installer meld
  fi

  if test -e /usr/bin/vim; then
    case $CFG_SYS in
      CENTOS) Installer vim-X11 ;;
      DEBIAN) Installer vim-gtk ;;
      UBUNTU) Installer vim-gtk ;;
      ARCHLINUX) 
        # Archlinux has conflicts between vim and gvim so vim has to be removed first.
	pacman -Rs vim
	Installer gvim ;;
    esac
  fi

  if test "x$CFG_GROUP_XUTIL" != "x"; then
    Installer $CFG_GROUP_XUTIL
  fi

  if test "x$1" = "-a"; then
    #### old style X fonts
    Installer xorg-fonts-100dpi xorg-fonts-75dpi
  fi

  # required in Archlinux
  Installer xorg-xrandr
}

Install_Batch_pulsa()
{
  local VOLUMN="pulseaudio"

  LogAs "\\nINSTALLING PulseAudio"

  case $CFG_SYS in
    CENTOS) VOLUMN="$VOLUMN pulseaudio-utils pulseaudio-qpaeq pavucontrol" ;;
    *) VOLUMN="$VOLUMN pulseaudio-utils pavucontrol" ;;
  esac
  Installer $VOLUMN
}

Install_Batch_firefox()
{
  LogAs "\\nINSTALLING firefox in Repo"

  case $CFG_SYS in
    CENTOS) Installer firefox mozilla-ublock-origin mozilla-noscript mozilla-https-everywhere ;;
    DEBIAN) Installer firefox-esr firefox-esr-ublock-origin firefox-esr-noscript firefox-esr-flashblock ;;
    UBUNTU) Installer firefox;;
    ARCHLINUX) Installer firefox;;
  esac
}

Install_Batch_firefox_qtm()
{
  LogAs "\\nINSTALLING firefox quantum"
  if test "x$CFG_SYS" = "xUBUNTU"; then
    if test ! -e "/etc/apt/sources.list.d/*-firefox-next-*"; then
      # install firefox quantum repo
      Installer software-properties-common
      LogExec add-apt-repository -y ppa:mozillateam/firefox-next
      LogExec apt-get update
    fi
    Installer firefox
    return
  fi

  LogExec wget --content-disposition --progress=dot:giga \"https://download.mozilla.org/?product=firefox-latest\&os=linux64\&lang=en-US\"

  local FFOX=$(ls firefox-*)
  if test ! -e "$FFOX"; then
    LogAs "ERROR: firefox not downloaded!"
    exit
  fi

  LogExec tar jxf $FFOX -C /opt 
  LogExec chown -R root:root /opt/firefox
  LogExec rm -f $FFOX

  # 20180723 steal the in-repo firefox causes problem and debian uses
  # firefox-esr anyway, create a standalone menu entry may be better. 
#  if test -L /usr/bin/firefox; then	# firefox has already been linked out
#    LogAs "Firefox updated."
#  elif test -e /usr/bin/firefox; then
#    LogExec mv -f /usr/bin/firefox /usr/bin/firefox-52
#    LogExec ln -s /opt/firefox/firefox /usr/bin/firefox
#  else
  if test ! -e /usr/share/applications/firefox-qtm.desktop; then
    cat >  $CHROOT/usr/share/applications/firefox-qtm.desktop << FIREFOX
[Desktop Entry]
Version=1.0
Name=Firefox Quantum Web Browser
Exec=/opt/firefox/firefox %u
#Exec=/opt/firefox/firefox -new-window
#Exec=/opt/firefox/firefox -private-window
Icon=/opt/firefox/browser/chrome/icons/default/default128.png
Terminal=false
X-MultipleArgs=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
StartupWMClass=Firefox
Categories=Network;WebBrowser;
X-Desktop-File-Install-Version=0.23
FIREFOX
  fi
}

Install_Batch_chromium()
{
  LogAs "\\nINSTALLING Open Source Chromium"
  case $CFG_SYS in
    CENTOS) Installer chromium chromedriver chromium-pepper-flash chrome-remote-desktop ;;
    DEBIAN) Installer chromium chromium-shell chromium-driver flashplayer-chromium ;;
    UBUNTU) Installer chromium-browser chromium-chromedriver chromium-ublock-origin ;;
    ARCHLINUX) Installer chromium ;;
  esac
}

Install_Batch_chrome()
{
  LogAs "\\nINSTALLING Google Chrome"
  case $CFG_SYS in
    CENTOS)
      if test ! -e /etc/yum.repos.d/google.repo; then
        #install google repos
        cat >  $CHROOT/etc/yum.repos.d/google.repo << GGLYUM
[google]
name=Google - \$basearch
baseurl=http://dl.google.com/linux/rpm/stable/\$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub

[google-chrome]
name=google-chrome
baseurl=http://dl.google.com/linux/chrome/rpm/stable/\$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub

GGLYUM
        LogExec yum -y update
      fi
      ;;
    DEBIAN|UBUNTU)
      grep "dl.google.com" /etc/apt/sources.list > /dev/null
      if test "x$?" != "x0"; then
        echo -e "\\n# Google packages i.e Google Chrome" >> $CHROOT/etc/apt/sources.list
	echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> $CHROOT/etc/apt/sources.list

        if test -e ./bin/linux_signing_key.pub; then
          LogExec apt-key add ./bin/linux_signing_key.pub
        else
          LogExec wget https://dl.google.com/linux/linux_signing_key.pub
          if test -e linux_signing_key.pub; then
            LogExec apt-key add linux_signing_key.pub
          fi
        fi
	LogExec apt-get update
	LogExec apt-get -y upgrade
      fi
      ;;
    ARCHLINUX) 
      # Archlinux doesn't use Google repo but AUR
      # https://linuxhint.com/install-google-chrome-on-arch-linux/
      LogExec git clone https://aur.archlinux.org/google-chrome.git
      if test -d google-chrome; then
        cd google-chrome
        LogExec makepkg -f -s
	local fname=$(/bin/ls google-chrome-*.pkg.tar.xz)
	if test "x$fname" != "x"; then
          LogExec pacman -U $fname
	fi
      fi
      return
      ;;
  esac

  Installer google-chrome-stable 
}

Install_Batch_virtualbox()
{
  local DEFUSER=$(Users)
  
  LogAs "\\nINSTALLING Oracle Repo Virtualbox"
  case $CFG_SYS in
    CENTOS) 
      Installer -g "Development Tools"
      Installer kernel-devel dkms wget

      if test ! -e /etc/yum.repos.d/virtualbox.repo; then
        LogExec wget \"http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo\"
        if test -e virtualbox.repo; then
          LogExec mv -f virtualbox.repo /etc/yum.repos.d
          LogExec yum -y update
        fi
      fi 
      Installer VirtualBox-5.2
      ;;
    DEBIAN)
      Installer build-essential manpages-dev

      grep virtualbox /etc/apt/sources.list > /dev/null
      if test "x$?" != "x0"; then
        echo -e "\\n# VirtualBox" >> $CHROOT/etc/apt/sources.list
        echo "deb http://download.virtualbox.org/virtualbox/debian stretch contrib" >> $CHROOT/etc/apt/sources.list
	if test ! -e oracle_vbox_2016.asc; then
          LogExec wget https://www.virtualbox.org/download/oracle_vbox_2016.asc
        fi
	if test -e oracle_vbox_2016.asc; then
          LogExec apt-key add oracle_vbox_2016.asc
	fi
        LogExec apt-get update
	LogExec apt-get -y upgrade
      fi
      Installer VirtualBox-5.2
      ;;
    UBUNTU)
      # We can use Ubuntu repo for virtualbox, but Oracle release seems better
      #Installer virtualbox virtualbox-ext-pack virtualbox-qt dkms
      grep virtualbox /etc/apt/sources.list > /dev/null
      if test "x$?" != "x0"; then
        cat >> $CHROOT/etc/apt/sources.list << ORACLE

# VirtualBox
deb http://download.virtualbox.org/virtualbox/debian xenial contrib
deb http://download.virtualbox.org/virtualbox/debian trusty contrib
deb http://download.virtualbox.org/virtualbox/debian precise contrib
ORACLE
        LogExec wget https://www.virtualbox.org/download/oracle_vbox.asc
        if test -e oracle_vbox.asc; then
          LogExec apt-key add oracle_vbox.asc
        fi
        LogExec apt-get update
        LogExec apt-get -y upgrade
      fi
      Installer VirtualBox-5.2 dkms
      ;;
    ARCHLINUX) 
      # Archlinux can use Community Repo
      Installer virtualbox virtualbox-host-modules-arch virtualbox-guest-iso
      # manual load the kernel modules
      #modprobe vboxdrv vboxnetadp vboxnetflt vboxpci
      ;;
  esac

  if test "x$DEFUSER" != "x"; then
    LogExec usermod -a -G vboxusers $DEFUSER
  fi
}

Install_Batch_vbguest()
{
  # FIXED: Most guest addition has problem with CentOS7.5/7.6. Only 5.2.x test builds work.
  # https://forums.virtualbox.org/viewtopic.php?f=3&t=87529
  local DEFUSER=$(Users)

  #install GNU GCC Compiler, kernel module and Development Environment
  LogAs "\\nINSTALLING Virtualbox Guest Addition"
  case $CFG_SYS in
    CENTOS) 
      Installer -g "Development Tools"
      Installer kernel-devel dkms
      ;;
    DEBIAN|UBUNTU) 
      # Do not use Ubunto repo for guest addition
      # Installer virtualbox-guest-x11 virtualbox-guest-dkms
      Installer build-essential manpages-dev dkms linux-headers-$(uname -r)
      ;;
    ARCHLINUX) 
      # Do not use Archlinux repo for guest addition
      # for default kernel
      #Installer virtualbox-guest-utils virtualbox-guest-modules-arch
      # for non-default kernels choose virtualbox-guest-dkms
      # To recompile the vbox kernel modules, run rcvboxdrv as root.
      #Installer virtualbox-guest-utils virtualbox-guest-dkms base-devel linux-headers
      Installer base-devel linux-headers
      ;;
  esac

  # try CDROM firstly for best matching the virtualbox host
  LogExec mount /dev/sr0 /mnt
  if test -e /mnt/VBoxLinuxAdditions.run; then
    LogExec cp -f /mnt/VBoxLinuxAdditions.run /root
  fi
  LogExec umount /mnt

  # Fix the error while Building the OpenGL support module in CentOS 6
#  cd /usr/src/kernels/$(uname -r)/include/drm 
#  if test ! -e drm.h; then
#    ln -s /usr/include/drm/drm.h drm.h  
#    ln -s /usr/include/drm/drm_sarea.h drm_sarea.h  
#    ln -s /usr/include/drm/drm_mode.h drm_mode.h  
#    ln -s /usr/include/drm/drm_fourcc.h drm_fourcc.h
#  fi
#  ls -l /usr/src/kernels/$(uname -r)/include/drm/drm.h | tee -a $CFG_LOG

  if test -e /root/VBoxLinuxAdditions.run; then
    LogExec chmod 755 /root/VBoxLinuxAdditions.run
    LogExec /root/VBoxLinuxAdditions.run

    if test "x$?" = "x0" -a "x$DEFUSER" != "x"; then
      LogExec usermod -a -G vboxsf $DEFUSER
    fi
  fi
}


Install_Batch_kvmhost()
{
  LogAs "\\nINSTALLING KVM/QEMU Hypervisor"

  # utilities for network tap devices
  Installer bridge-utils iptables dnsmasq

  case $CFG_SYS in
    CENTOS) 
      Installer qemu-kvm qemu-kvm-common qemu-kvm-tools qemu-system-x86 virt-viewer
      Installer --enablerepo=nux-misc tunctl
      #FIXME: where is VDE2?
      ;;
    DEBIAN|UBUNTU) 
      Installer qemu-kvm kvmtool virt-viewer
      Installer uml-utilities vde2
      ;;
    ARCHLINUX) 
      Installer qemu vde2 libvirt virt-viewer 
      ;;
  esac

  if ! test -e /etc/qemu-ifup; then
    LogExec cp -f qemu-ifup /etc
  fi
}

Install_Batch_kvmguest()
{
  LogAs "\\nINSTALLING KVM Guest Configuration"

  Toggle_Screen xinit
  Installer spice-vdagent
  Install_Batch_eth0
}

Install_Batch_downloader()
{
  LogAs "\\nINSTALLING filezilla and qbittorrent"

  Installer filezilla qbittorrent
}

Install_Batch_remotetty()
{
  LogAs "\\nINSTALLING remote terminal access"

  local VOLUMN="putty"
  case $CFG_SYS in
    CENTOS) 
      VOLUMN="$VOLUMN remmina remmina-plugins-vnc remmina-plugins-rdp" 
      if test -e /usr/bin/srecord; then
        VOLUMN="$VOLUMN cutecom"
      fi
      ;;
    DEBIAN) 
      VOLUMN="$VOLUMN vnc-viewer" 
      if test -e /usr/bin/srecord; then
        VOLUMN="$VOLUMN cutecom"
      fi
      ;;
    UBUNTU) 
      VOLUMN="$VOLUMN remmina remmina-plugins-vnc remmina-plugins-rdp remmina-plugins-spice" 
      if test -e /usr/bin/srecord; then
        VOLUMN="$VOLUMN cutecom"
      fi
      ;;
    ARCHLINUX) 
      VOLUMN="$VOLUMN tigervnc x11vnc remmina"
      ;;
  esac
  if test "x$VOLUMN" != "x"; then
    Installer $VOLUMN
  fi
}

Install_Batch_pidgin()
{
  LogAs "\\nINSTALLING pidgin and its plugins"

  case $CFG_SYS in
    CENTOS) Installer pidgin pidgin-sipe pidgin-otr libpurple pidgin-hangouts ;;
    DEBIAN) Installer pidgin pidgin-encryption pidgin-data pidgin-gnome-keyring pidgin-sipe ;;
    UBUNTU) Installer pidgin pidgin-encryption pidgin-data pidgin-sipe pidgin-skype ;;
    ARCHLINUX) Installer pidgin pidgin-sipe pidgin-otr libpurple ;;
  esac
}

Install_Batch_picture()
{
  LogAs "\\nINSTALLING picture tools"

  if test "x$CFG_GROUP_PIC" = "x"; then
    Installer geeqie gthumb imagemagick
  else
    Installer $CFG_GROUP_PIC
  fi
}

Install_Batch_cad()
{
  LogAs "\\nINSTALLING CAD tools"

  if test "x$CFG_GROUP_CAD" = "x"; then
    Installer librecad
  else
    Installer $CFG_GROUP_CAD
  fi
}
  
Install_Batch_vlc()
{
  LogAs "\\nINSTALLING VLC player"

  case $CFG_SYS in
    CENTOS) Installer vlc vlc-extras vlc-plugin-jack ;;
    DEBIAN|UBUNTU) Installer vlc vlc-plugin-samba vlc-plugin-jack ;;
    ARCHLINUX) Installer vlc ;;
  esac

  # this font is for chinese subtitles in VLC
  if test ! -e /usr/share/fonts/kaiu_DFKai-SB.ttf; then
    if test -e ./bin/DFKai-SB.7z; then
      LogExec 7za x -o/usr/share/fonts ./bin/DFKai-SB.7z
    fi
  fi
}

Install_Batch_gstreamer()
{
  LogAs "\\nINSTALLING GStreamer Codecs"

  local VOLUMN=""
  case $CFG_SYS in
    CENTOS) VOLUMN="$VOLUMN gstreamer gstreamer-ffmpeg gstreamer-plugins-base \
      gstreamer-plugins-good gstreamer-plugins-bad gstreamer-plugins-bad-free \
      gstreamer-plugins-bad-nonfree gstreamer-plugins-ugly gstreamer-plugins-base-tools \
      gstreamer1 gstreamer1-libav gstreamer1-plugins-base gstreamer1-plugins-base-tools \
      gstreamer1-plugins-good gstreamer1-plugins-bad-free gstreamer1-plugins-bad-freeworld \
      gstreamer1-plugins-ugly gstreamer1-plugins-ugly-free"
      ;;

    DEBIAN|UBUNTU) VOLUMN="$VOLUMN gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-libav \
      gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
      gstreamer1.0-plugins-ugly gstreamer1.0-pulseaudio gstreamer1.0-tools"
      ;;

    ARCHLINUX) VOLUMN="$VOLUMN gstreamer gst-libav gst-plugins-bad gst-plugins-base \
      gst-plugins-good gst-plugins-ugly" ;;
  esac
  if test "x$VOLUMN" != "x"; then
    Installer $VOLUMN
  fi
}

Install_Batch_office()
{
  LogAs "\\nINSTALLING Libre Office Suite"
  case $CFG_SYS in
    CENTOS|DEBIAN|UBUNTU) Installer libreoffice ;;
    ARCHLINUX) Installer libreoffice-fresh ;;
  esac
}

Install_Batch_eafont()
{
  LogAs "\\nINSTALLING East Asian fonts ($CFG_GROUP_EA_FONT)"
  local VOLUMN=""
  case $CFG_SYS in
    CENTOS) VOLUMN="$VOLUMN wqy-microhei-fonts wqy-zenhei-fonts"
      if test "x$CFG_GROUP_EA_FONT" = "xfull"; then
        VOLUMN="$VOLUMN cjkuni-ukai-fonts cjkuni-uming-fonts"
	VOLUMN="$VOLUMN horai-ume-*-fonts ipa-*-fonts"
      fi
      ;;
    DEBIAN|UBUNTU) VOLUMN="$VOLUMN fonts-wqy-microhei fonts-wqy-zenhei"
      if test "x$CFG_GROUP_EA_FONT" = "xfull"; then
        VOLUMN="$VOLUMN fonts-arphic-ukai fonts-arphic-uming fonts-arphic-gkai00mp"
	VOLUMN="$VOLUMN fonts-arphic-bkai00mp fonts-ipafont fonts-hanazono fonts-sawarabi-mincho"
      fi
      ;;
    ARCHLINUX) VOLUMN="$VOLUMN wqy-zenhei wqy-microhei-lite"
      if test "x$CFG_GROUP_EA_FONT" = "xfull"; then
        VOLUMN="$VOLUMN wqy-bitmapfont ttf-arphic-ukai ttf-arphic-uming opendesktop-fonts"
	VOLUMN="$VOLUMN adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts"
	VOLUMN="$VOLUMN adobe-source-han-sans-tw-fonts adobe-source-han-serif-tw-fonts"
	VOLUMN="$VOLUMN adobe-source-han-sans-jp-fonts adobe-source-han-serif-jp-fonts"
	VOLUMN="$VOLUMN otf-ipafont ttf-hanazono  ttf-sazanami ttf-baekmuk"
      fi
      ;;
  esac
  if test "x$VOLUMN" != "x"; then
    Installer $VOLUMN
  fi
}

# This is a support function for installing IME
Install_Batch_chinese()
{
  LogAs "\\nINSTALLING Chinese application adjustment"

  # setting to support Chinese in leafpad
  if test -e /usr/bin/leafpad; then
    LogExec mv -f /usr/bin/leafpad /usr/bin/leafpad-gui

    cat > $CHROOT/usr/bin/leafpad << LEAFPAD
#!/bin/sh
/usr/bin/leafpad-gui --codeset=gbk \$*
LEAFPAD
    chmod 755 $CHROOT/usr/bin/leafpad
  fi
}

Install_Batch_ibus()
{
  LogAs "\\nINSTALLING Chinese and Japanese IBUS package"
  case $CFG_SYS in
    CENTOS) Installer ibus ibus-qt ibus-libpinyin ibus-anthy ;;
    DEBIAN|UBUNTU) Installer ibus ibus-qt4 ibus-libpinyin ibus-anthy ;;
    ARCHLINUX) Installer ibus ibus-qt ibus-libpinyin ibus-googlepinyin ibus-anthy ;;
  esac 

  # auto start the daemon
  cat >> /etc/X11/xinit/xinitrc << ASIBUS

if test -x /usr/bin/ibus-daemon; then
  ibus-daemon -drx
fi

ASIBUS

  # added recommanded variables to bashrc
  # there was a dispute about xim method, see
  # https://wiki.archlinux.org/index.php/IBus
  grep GTK_IM_MODULE $CHROOT/etc/skel/.bashrc > /dev/null
  if test "x$?" != "x0"; then
cat >> $CHROOT/etc/skel/.bashrc << CFGIBUS

export GTK_IM_MODULE=xim
export XMODIFIERS=@im=ibus
export QT_IM_MODULE=xim

CFGIBUS
  fi

  # install extra chinese fonts and japanese fonts
  Install_Batch_eafont
  Install_Batch_chinese
}

Install_Batch_fcitx()
{
  LogAs "\\nINSTALLING Chinese and Japanese Fcitx package"
  case $CFG_SYS in
    CENTOS) Installer fcitx fcitx-anthy fcitx-cloudpinyin fcitx-configtool ;;
    DEBIAN|UBUNTU) Installer fcitx fcitx-libpinyin fcitx-googlepinyin fcitx-config-common fcitx-mozc ;;
    ARCHLINUX) Installer fcitx-im fcitx-libpinyin fcitx-googlepinyin fcitx-configtool fcitx-mozc ;;
  esac 

  # install extra chinese fonts and japanese fonts
  Install_Batch_eafont
  Install_Batch_chinese
}

Install_Batch_bluetooth()
{
  LogAs "\\nINSTALLING Bluetooth Manager"

  case $CFG_SYS in
    CENTOS) Installer bluez pulseaudio-module-bluetooth bluez-tools ;;
    DEBIAN|UBUNTU) Installer blueman bluez pulseaudio-module-bluetooth bluez-tools bluez-firmware ;;
    ARCHLINUX) Installer blueman bluez pulseaudio-bluetooth bluez-tools bluez-firmware bluez-plugins;;
  esac
}

Install_Batch_dropbox()
{
  LogAs "\\nINSTALLING Dropbox daemon"

  if test "$(uname -m)" = "x86_64"; then
    LogExec wget --content-disposition --progress=dot:giga \"https://www.dropbox.com/download?plat=lnx.x86_64\"
  else
    LogExec wget --content-disposition --progress=dot:giga \"https://www.dropbox.com/download?plat=lnx.x86\"
  fi

  local DRBOX=$(ls dropbox-lnx.*.tar.gz)
  if test ! -e "$DRBOX"; then
    LogAs "ERROR: dropbox daemon not downloaded!"
    exit
  fi
  
  if test ! -d "$CHROOT/opt/dropbox"; then
    mkdir -p $CHROOT/opt/dropbox
  fi
  LogExec tar zxf $DRBOX -C /opt/dropbox --strip-components=1
  LogExec chown -R root:root /opt/dropbox
  LogExec cp ./bin/dropbox.png /opt/dropbox
  LogExec rm -f $DRBOX

  # create the desktop entry file
  if test ! -e /usr/share/applications/dropbox.desktop; then
    cat > $CHROOT/usr/share/applications/dropbox.desktop << DROPBOX
[Desktop Entry]
Name=Dropbox
GenericName=Network Storage
Comment=Dropbox is a free service that lets you bring your photos, docs, and videos anywhere and share them easily
Exec=/opt/dropbox/dropboxd
Icon=/opt/dropbox/dropbox.png
Terminal=false
Type=Application
Categories=Network;
StartupNotify=false
DROPBOX
  fi
}

#############################################################################
# Support Scripts
#############################################################################
Toggle_Touchpad()
{
  if test ! -e /usr/bin/xinput; then
    Installer xinput
  fi

  local PadID=$(xinput list --id-only "SynPS/2 Synaptics TouchPad" 2> /dev/null)

  case "$1" in
    on|ON)
      if test "x$PadID" = "x"; then
        LogAs "TouchPad not found"
      else
        xinput --enable $PadID
      fi
      ;;
    off|OFF)
      if test "x$PadID" = "x"; then
        LogAs "TouchPad not found"
      else
        xinput --disable $PadID
      fi
      ;;
    *)
      local ConfID="/usr/share/X11/xorg.conf.d/*-synaptics.conf"
      if test ! -e "$ConfID"; then
        ConfID="/usr/share/X11/xorg.conf.d/20-synaptics.conf"
      fi

      cat >> $ConfID << TPADOFF

# Disable generic Synaptics device, as we're using
Section "InputClass"
	Identifier "SynPS/2 Synaptics TouchPad"
	MatchProduct "SynPS/2 Synaptics TouchPad"
	MatchIsTouchpad "on"
	MatchOS "Linux"
	MatchDevicePath "/dev/input/event*"
	Option "Ignore" "on"
EndSection

TPADOFF
      ;;
  esac
}

Toggle_Screen()
{
  local OUTPUT=$(xrandr | grep "connected primary" | cut -f1 -d" ")
  
  if test "x$OUTPUT" = "x"; then
    OUTPUT="Virtual-0"
    if test "x$CFG_SYS" = "xARCHLINUX"; then
      OUTPUT="Virtual-1"
    fi
  fi

  case "$1" in
    1920x1080) xrandr --output "$OUTPUT" --mode 1920x1080 ;;
    1280x1024) xrandr --output "$OUTPUT" --mode 1280x1024 ;;
    1280x960) xrandr --output "$OUTPUT" --mode 1280x960 ;;

    xinit)
      local DEVNAME="/usr/share/X11/xorg.conf.d/10-monitor.conf"
      LogAs "Adding modeline to $DEVNAME"
      if test -e "$DEVNAME"; then
        LogAs "Found $DEVNAME! Please add modelines manually!"
        DEVNAME=/dev/stdout
      fi

      cat > $DEVNAME << XMON
# The host screen is 1920x1080, so
# In QEMU/SDL window, the preferred solution is 1920x940
# In QEMU/SPICE/remote-viewer window, the preferred solution is 1912x936
Section "Monitor"
    Identifier "$OUTPUT"
    Modeline "1920x960_60.00"  152.00  1920 2032 2232 2544  960 963 973 996 -hsync +vsync
    Modeline "1920x940_60.00"  148.75  1920 2032 2232 2544  940 943 953 976 -hsync +vsync
    Modeline "1920x800_60.00"  125.00  1920 2024 2216 2512  800 803 813 831 -hsync +vsync
    Modeline "1912x936_60.00"  147.75  1912 2024 2224 2536  936 939 949 972 -hsync +vsync
    Modeline "1912x800_60.00"  124.75  1912 2016 2208 2504  800 803 813 831 -hsync +vsync
    Option "PreferredMode" "1912x936_60.00"
EndSection

XMON
      ;;

    *x*)
      local MODLINE=$(cvt $(echo $1 | tr 'x' ' ') | grep Modeline | cut -d' ' -f2-)
      local MODNAME=$(echo $MODLINE | cut -d'"' -f2)
      if test "x$MODLINE" != "x"; then
        # It must use eval, otherwise the quota char (") will become part of mode name
        eval xrandr --newmode $MODLINE
        eval xrandr --addmode "$OUTPUT" $MODNAME
        eval xrandr --output "$OUTPUT" --mode $MODNAME
      fi
      ;;
  esac
}

# $1: from  $2: to
Expected_scp()
{
  if test "$1" = "*:*"; then
    echo Downloading from SSH server $1
  else
    echo Uploading $1 to SSH server $2
  fi
  if test -x /usr/bin/expect -a "x$SSPASS" != "x"; then
    expect -c "
set timeout 60
spawn scp \"$1\" \"$2\"
expect {
  \"yes/no\" { 
    send \"yes\r\"
    exp_continue
  }
  \"*?assword\" { 
    send \"$SSPASS\r\" 
    interact
  } 
} "
  else
    scp "$1" "$2"
  fi
}

# For virtualbox quick copy
Packing()
{
  local FNAME=mkvbox-$(date +%Y%m%d%H%M%S)
  local OBJS="bin kvmrun LICENSE mkvbox README.md tmp.txt profile"

  if test "x$1" = "x"; then		# pack only
    tar czf $FNAME.tar.gz $OBJS
  elif test "x$1" = "xPublic"; then	# packing and uploading
    tar czf $FNAME.tar.gz $OBJS
    Expected_scp $FNAME.tar.gz $SSHOST:"$1"
    rm -f $FNAME.tar.gz
  else
    echo Downloading from SSH server $SSHOST:$1
    Expected_scp $SSHOST:"$1"/mkvbox-*.tar.gz .
  fi
}

Copy_Paste()
{
  local CLIPPATH=/tmp
  local CLIPFILE=clipboard.txt
  local EDITOR=vi

  if test -x /usr/bin/pluma; then
    EDITOR=/usr/bin/pluma
  elif test -x /usr/bin/mousepad; then
    EDITOR=/usr/bin/mousepad
  elif test -x /usr/bin/gedit; then
    EDITOR=/usr/bin/gedit
  elif test -x /usr/bin/leafpad; then
    EDITOR=/usr/bin/leafpad
  elif test -x /usr/bin/kwrite; then
    EDITOR=/usr/bin/kwrite
  fi

  # let clients do the transfering 
  ip addr | grep 10.0.2 > /dev/null
  if test "x$?" = "x1"; then
    $EDITOR $CLIPPATH/$CLIPFILE &
  else
    Expected_scp $SSHOST:$CLIPPATH/$CLIPFILE $CLIPPATH
    local BEFORE=$(md5sum $CLIPPATH/$CLIPFILE | cut -f1 -d' ')
    $EDITOR $CLIPPATH/$CLIPFILE
    if test "$BEFORE" != $(md5sum $CLIPPATH/$CLIPFILE | cut -f1 -d' '); then
      Expected_scp $CLIPPATH/$CLIPFILE $SSHOST:$CLIPPATH
    fi
  fi
}


xconfigure()
{
  # It was trying to fix the pluma flickering issue in QXL/SDL window
  # https://askubuntu.com/questions/895558/screen-flickering-when-i-run-commands-in-gnome-terminal
  # however it didn't work, though the configure file might be useful later

  cat > /usr/share/X11/xorg.conf.d/20-qxl.conf << QXLCONF
Section "Device"
	Identifier  "Card0"
	Driver      "qxl"
	BusID       "PCI:0:2:0"
	Option      "AccelMethod"  "none"
EndSection
QXLCONF
}

#############################################################################
# Install starting
#############################################################################
usage_exit()
{
  cat << my_usage
$0 [OPTION]
OPTION:
  -d, --desktop     choose desktop [mate/xfce/lxde/cinnamon/gnome/kde]
  -v, --vm          choose Virtual Machine type [none/vbguest/kvmguest]
      --ime         choose IME method [ibus/fcitx]
  -i, --install     quick installing packages
  -t, --touchpad    change the touchpad control [disable/on/off]
      --screen      change screen size of client (qxl) [1920x1080/1280x1024/.../xinit]
      --packing     pack and transfer the mkvbox to VM host [Public][download_path]
      --clip        simple way to copy and paste

my_usage
  exit 0
}

report_exit()
{
  case $CFG_SYS in
    CENTOS) grep -e "Error:" -e "Warning:" $CFG_LOG ;;
    DEBIAN|UBUNTU) grep -e "E:" -e "W:"  $CFG_LOG ;; 
    ARCHLINUX) grep -e "warning:" -e "error:" $CFG_LOG ;;
  esac
  exit $1
}


#############################################################################
# main
#############################################################################
CFG_SYS=$(System)

# enlist the quick install options
# The front and end whitespace is needed
CFG_INSTALL=" "
for i in $(grep "^Install_Batch_.*()" $0);
do
  CFG_INSTALL="$CFG_INSTALL $(echo $i | cut -d_ -f3- | cut -d\( -f1)"
done
CFG_INSTALL="$CFG_INSTALL "

#echo $CFG_INSTALL | fold -s -w $(tput cols)
#echo $(Users)

# once for all in dry-run mode
if test ! -d "$CHROOT/etc/skel"; then
  mkdir -p $CHROOT/etc/skel
  mkdir -p $CHROOT/usr/bin
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
    -h|--help) usage_exit;;
    -d|--desktop) CFG_DESKTOP="$2"; shift;;
    -v|--vm)
      if test -z "${CFG_INSTALL##* $2 *}"; then
        CFG_VMCN="$2"; 
      fi
      shift;;
    --ime)
      if test -z "${CFG_INSTALL##* $2 *}"; then
        CFG_IME="$2"; 
      fi
      shift;;

    -t|--touchpad) Toggle_Touchpad "$2"; exit 0;;
    --screen) Toggle_Screen "$2"; exit 0;;
    --packing) Packing "$2"; exit 0;;
    --clip) SSPASS="$2"; Copy_Paste; exit 0;;

    -i|--install) 
      if test "x$2" = "x"; then
        echo Option: $CFG_INSTALL | fold -s -w $(tput cols)
      elif test -z "${CFG_INSTALL##* $2 *}"; then
        Install_Batch_$2 $3 $4 $5 $6 $7 $8 $9
      else
        echo Quick installation option [$2] not found!
      fi
      exit 0
      ;;

    -*) echo Unknown parameter [$@]; exit 1;;
    *) break;;
  esac
  shift
done

# verify the configure options to make sure they will be installed
if test "x$CFG_VMCN" != "x"; then
  if test ! -z "${CFG_GUI##* $CFG_VMCN *}"; then
    CFG_GUI="$CFG_GUI $CFG_VMCN"
  fi
fi
if test "x$CFG_IME" != "x"; then
  if test ! -z "${CFG_GUI##* $CFG_IME *}"; then
    CFG_GUI="$CFG_GUI $CFG_IME"
  fi
fi

# wipe clean the log file
echo "$CFG_SYS Installation on $(date)" > $CFG_LOG
LogAs "Package choosed: $CFG_CLI $CFG_GUI"

#install the command line applications
for i in $(echo $CFG_CLI);
do
  Install_Batch_$i
done


#############################################################################
# install the X11 desktop environment
#############################################################################
if test "x$CFG_DESKTOP" != "x"; then	# X11 GUI is not required.
  Install_Batch_xorg $CFG_DESKTOP

  # install desktop application
  for i in $(echo $CFG_GUI);
  do
    Install_Batch_$i
  done
fi

#############################################################################
# Setup the useful scripts
#############################################################################
Install_Batch_skel
Install_Batch_group
report_exit 0


#############################################################################
# Document, Issue and History
#############################################################################
# Installation:
#  1. minimem installation with root only 
#
# ARCHLINUX Installation:
#  1. fdisk /dev/sda
#  2. mkfs.ext4 /dev/sda1
#  3. mount /dev/sda1 /mnt
#  4. vi /etc/pacman.d/mirrorlist
#  5. pacstrap /mnt base
#  6. genfstab -U /mnt >> /mnt/etc/fstab
#  7. arch-chroot /mnt
#  8. cp /etc/netctl/examples/ethernet-dhcp /etc/netctl/
#  9. vi /etc/netctl/ethernet-dhcp
#     Interface=enp0s3
# 10. netctl enable ethernet-dhcp
# 11. passwd root
# 12. pacman -S grub
# 13. grub-install --target=i386-pc /dev/sda
# 14. grub-mkconfig -o /boot/grub/grub.cfg
#
# Using the Installer script:
#  1. install git
#  2. git clone https://github.com/xuminic/mkvbox.git
#  3. run 'hatch'
#
# Notes:
#  * matplotlib requires python-dev
#  * gstreamer1-vaapi seems a trouble maker
#  * CENTOS: Xfce need to be explictly chosen when logining
#  * https://github.com/qemu/qemu/blob/master/docs/qdev-device-use.txt
#  * Cygwin for XP: no more than 2.5.2.
#    https://superuser.com/questions/1132000/is-it-still-possible-to-get-cygwin-for-xp
#
# Issue:
#  * MATE was broken by EPEL repo in CentOS 7.
#    libwebkitgtk was removed so it broke the atril; test repo can fix it.
#    https://bugzilla.redhat.com/show_bug.cgi?id=1589486
#  * Virtualbox Guest Addition has problem with CentOS7.5/7.6 Debian 9.
#    CentOS 7 needs 5.2.x test builds at least
#    Debian 9 needs 5.2.8 at least
#  * Neither of Virtualbox Guest Addition in Ubuntu and Archlinux repo worked
#    reliably so let's just stay focus on Oracle releases.
#  * Ubuntu 18/Mate includes ibus in default so fcitx may not run.
#    [Updated] Seems fcitx not functional in all distribution.
#  * The source of the string magic [! -z "${CFG_GUI##* $CFG_VMCN *}"] is
#    https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash
#  * Relocated the gsettings of pluma from Install_Batch_chinese() to profile because 
#    gsettings require a run X session and it's a per-user based configuration.
#  * The Predictable Network Interface Names caused the ethernet interface name
#    unpredicatble in VM when machine types, buses, devices, etc. changes.
#    The Install_Batch_eth0() should restore the traditional eth0 interface instead.
#    Some command may help diagnostic: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=799253
#      ls -lR /sys/bus/virtio/drivers/virtio_net/
#      udevadm info --export-db
#  * Pulseaudio brings in too many softwares (include vlc in centos) so disbled it for VM client.
#  * q35 architecture stop the internal savevm command. Have to disable it temporarily.
#    https://bugzilla.redhat.com/show_bug.cgi?id=953062
#
# FIXME:
#  * Debian should check key before download the repo key.
#  * Archlinux keeps freezing in desktop panel applets
#
# History:
#

