#!/bin/bash
#
# Known issues:
# qemu-system-x86_64 doesn't support l2-cache-size so cluster_size set to 256K
# qemu-system-x86_64 doesn't support smp to q35 machine type
# q35 machine type can not be used in installation process

# debug only
#RUN=echo

#############################################################################
# Configure
#############################################################################
CFG_ISO=
CFG_HDS=16G
CFG_RAM=2G

#############################################################################
# System definition
#############################################################################
# KVM Machine configurations
#VMMONITOR="-monitor stdio"
VMMONITOR="-monitor vc"
#VMVIDEO="-device qxl-vga,id=video0,ram_size=67108864,vram_size=67108864,\
#          vram64_size_mb=0,vgamem_mb=16,bus=pci.0,addr=0x2"
VMVIDEO="-vga qxl"
#VMIOMMU="-machine q35,accel=kvm -cpu host,kvm=off"
VMIOMMU="-machine pc,accel=kvm -cpu host -smp 2"
VMRNG="-object rng-random,filename=/dev/random,id=rng0 -device virtio-rng-pci,rng=rng0"

VMFLAGS="-enable-kvm -daemonize $VMMONITOR $VMVIDEO -m $CFG_RAM"
VMRTIME="$VMIOMMU $VMRNG"


#############################################################################
# System Support Group
#############################################################################
# FIXME: qemu-system-x86_64 doesn't support l2-cache-size
# qemu-system-x86_64: -drive file=vdisk_hda.kvm,l2-cache-size=2M: 
#   could not open disk image vdisk_hda.kvm: Block format 'qcow2' used by 
#   device 'ide0-hd0' doesn't support the option 'l2-cache-size'
# FIXME: qemu-system-x86_64 doesn't support cache=none in an empty qcow2 image.
# qemu-system-x86_64: -drive file=kkk_hda.kvm,if=none,id=qcow2,aio=native,cache=none: \
#   could not open disk image kkk_hda.kvm: Could not read L1 table: Invalid argument
# Note: Generally, do not use aio=native option along with cache=none for QEMU. 
#   https://access.redhat.com/articles/41313
# 
# qemu [...] -drive if=none,id=drive0,format=raw -device virtio-blk-pci,drive=drive0,scsi=off ...
add_drive()
{
  local TYPE=$(qemu-img info $1 | grep 'file format:' | cut -d' ' -f3)
  #local SIZE=$(qemu-img info $1 | grep 'virtual size:' | cut -d'(' -f2 | cut -d' ' -f1)
  local SIZE=0
  local OPT_CACHE=""
  #local OPT_AIO=",aio=native,cache=none"

  case "$TYPE" in
    qcow2)
      if [ $SIZE -ge 68719476736 ]; then
        OPT_CACHE=",l2-cache-size=8M"
      elif [ $SIZE -ge 34359738368 ]; then
        OPT_CACHE=",l2-cache-size=4M"
      elif [ $SIZE -ge 17179869184 ]; then
        OPT_CACHE=",l2-cache-size=2M"
      fi ;;

    raw|vvfat|vpc|vmdk|vhdx|vdi)
      ;;
        
    *) return ;;
  esac

  #echo "-drive file=${1}${OPT_CACHE},if=virtio"
  echo "-device virtio-blk-pci,drive=${TYPE},scsi=off -drive file=${1}${OPT_CACHE},if=none,id=${TYPE}${OPT_AIO}"
} 


# FIXME: random may not be a good idea. Fix the MAC to specified VM looks better
#    printf "52:54:%02x:%02x:%02x:%02x" $(( $RANDOM & 0xff)) $(( $RANDOM & 0xff )) \
#        $(( $RANDOM & 0xff)) $(( $RANDOM & 0xff ))
# FIXME: -device virtio-net-pci performance better than -net nic,model=virtio
#     echo "-net nic,model=virtio,macaddr=${macaddr}"
#     https://www.linux-kvm.org/page/10G_NIC_performance:_VFIO_vs_virtio
# FIXME: could not configure /dev/net/tun (tap0): Operation not permitted
#     -netdev tap,id=net0,ifname=tap0,script=/etc/qemu-kvm/qemu-ifup \
#             -device virtio-net-pci,netdev=net0,mac=${macaddr}"
add_nic()
{

    local nhash=$(echo $1|md5sum)
    local macaddr="52:54:${nhash:0:2}:${nhash:2:2}:${nhash:4:2}:${nhash:6:2}"
    echo "-netdev user,id=net0 -device virtio-net-pci,netdev=net0,mac=${macaddr}"
}


# $1: size  $2: name
vm_create_disk()
{
  if test ! -e $2; then
    echo qemu-img create -f qcow2 -o cluster_size=256K $2 $1
    $RUN qemu-img create -f qcow2 -o cluster_size=256K $2 $1
  fi
}


# searching the available vm file systems
vm_search()
{
  if test -e $1; then
    # if explicily given the vm file system
    echo $(add_drive $1)
  else
    # if given the vm name then searching for it's file systems 
    # in the name pattern: xxx_hdx.*
    local HDD=""
    for i in ${1}_hd?.{qcow2,raw,vvfat,vpc,vmdk,vhdx,vdi}
    do
      if test -e $i; then
        HDD="$HDD $(add_drive $i)"
      fi
    done
    echo $HDD
  fi
}

# Install the vmachine
# Two parameters: $1 is the ISO image; $2 is the vmachine name
vm_install()
{
  local HDD=""

  if test ! -e $1; then
    echo ISO Image [$1] not found
  elif test -e $2; then
    HDD=$(add_drive $2)     # explicily given the vm file system
  else
    # searching for vm file systems in the name pattern: xxx_hdx.*
    HDD=$(vm_search $2)

    # if no vm file system were found then create a default one
    if test "$HDD" = ""; then
      echo VM File System not found! Creating by default [qcow2, $CFG_HDS]
      $RUN vm_create_disk $CFG_HDS ${2}_hda.qcow2
      HDD=$(add_drive ${2}_hda.qcow2)
    fi
  fi

  if test "$HDD" = ""; then
    echo VM File System not found [%2]
  else
    echo qemu-system-x86_64 -cdrom "$1" -boot order=d $VMFLAGS $HDD
    $RUN qemu-system-x86_64 -cdrom "$1" -boot order=d $VMFLAGS $HDD
  fi
}

# Run the vmachine
# One parameter: $1 is the vmachine name
vm_run()
{
  local HDD=$(vm_search $1)

  if test "$HDD" = ""; then
    echo KVM Image [$1] not found
  else
    echo qemu-system-x86_64 -name $1 $VMFLAGS $VMRTIME $(add_nic ${1}) $HDD
    $RUN qemu-system-x86_64 -name $1 $VMFLAGS $VMRTIME $(add_nic ${1}) $HDD
  fi
}

list_iommu()
{
    shopt -s nullglob
    for d in /sys/kernel/iommu_groups/*/devices/*; do
        n=${d#*/iommu_groups/*}; n=${n%%/*}
        printf 'IOMMU Group %s ' "$n"
        lspci -nns "${d##*/}"
    done
}

list_vmdisk()
{
  if test -e $2; then
    if test "$1" = "-s"; then
      qemu-img snapshot -l $2
    else
      qemu-img info $2
    fi
  else
    for i in ${2}_hd?.{qcow2,raw,vvfat,vpc,vmdk,vhdx,vdi}
    do
      if test -e $i; then
        if test "$1" = "-s"; then
          qemu-img snapshot -l $i
	else
	  qemu-img info $i
	  echo ""
	fi
      fi
    done
  fi
}

usage_exit()
{
    cat << my_usage
$0 [OPTION] KVM_IMAGE_NAME
OPTION:
  -i, --install=IMAGE        The installer ISO image
  -r, --ram=RAM              Define the size of RAM [2G]
  -s, --hdd-size=SIZE        Define the size of hard disks [16G]
      --iommu                List the IOMMU Group
      --snapshot             List the known snapshots
      --vmdisk               List the VM disk volumn

KVM_IMAGE_NAME is the base name of the KVM virtual machine.
The correspondent image is KVM_IMAGE_NAME_hda.kvm.

my_usage
    exit 0
}

#############################################################################
# main
#############################################################################
while [ "$#" -gt 0 ]; do 
  case "$1" in
    -h|--help) usage_exit;;

    -i) CFG_ISO="$2"; shift;;
    --install=*) CFG_ISO="${1#*=}";;

    -r) CFG_RAM="$2"; shift;;
    --ram=*) CFG_RAM="${1#*=}";;

    -s) CFG_HDS="$2"; shift;;
    --hdd-size=*) CFG_HDS="${1#*=}";;

    --iommu) list_iommu; exit 0;;

    --snapshot) list_vmdisk -s $2; exit 0;;
    --vmdisk)   list_vmdisk -d $2; exit 0;;

    -*) echo Unknown parameter [$@]; exit 1;;
    *) break;;
  esac
  shift
done

if [ "$#" = "0" ]; then 
  usage_exit
fi

if [ "$CFG_ISO" != "" ]; then
  vm_install $CFG_ISO $1
else
  vm_run $1
fi
